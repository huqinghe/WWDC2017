{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 AppleColorEmoji;
}
{\colortbl;\red255\green255\blue255;\red255\green0\blue0;\red249\green249\blue249;\red0\green0\blue255;
\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c100000\c0\c0;\cssrgb\c98039\c98039\c98039;\csgenericrgb\c0\c0\c100000;
\csgenericrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18920\viewh14500\viewkind0
\deftab720
\pard\pardeftab720\qc\partightenfactor0

\f0\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
https://developer.apple.com/videos/play/wwdc2017/703/ 
\f1 \'a3\'a8\'ca\'d3\'c6\'b5\'b5\'d8\'d6\'b7\'a3\'a9
\f0 \
\pard\pardeftab720\partightenfactor0
\cf4 [ Crowd Sounds ] Wow. It's very exciting to be here. I'm Gaurav. And today we are going to discuss machine learning. Machine learning is a very powerful technology.\
And together with the power of our devices, you can create some really amazing experiences.\cf5 \

\f1 \'c0\'b4\'b5\'bd\'d5\'e2\'ca\'c7\'ba\'dc\'bc\'a4\'b6\'af\'b5\'c4\'a1\'a3\'ce\'d2\'ca\'c7Gaurav \'a1\'a3\'bd\'f1\'cc\'ec\'ce\'d2\'c3\'c7\'cc\'d6\'c2\'db\'bb\'fa\'c6\'f7\'d1\'a7\'cf\'b0\'a1\'a3\'bb\'fa\'c6\'f7\'d1\'a7\'cf\'b0\'ca\'c7\'ba\'dc\'c7\'bf\'b4\'f3\'b5\'c4\'bc\'bc\'ca\'f5\'a1\'a3\
\'ba\'cd\'ce\'d2\'c3\'c7\'b5\'c4\'c9\'e8\'b1\'b8\'bd\'e1\'ba\'cf\'a3\'ac\'c4\'e3\'bf\'c9\'d2\'d4\'b4\'b4\'d4\'ec\'b3\'f6\'d5\'e6\'d5\'fd\'b5\'c4\'c7\'bf\'b4\'f3\'be\'ab\'b2\'ca\'b5\'c4\'cc\'e5\'d1\'e9\'a1\'a3
\f0 \
\cf4 For example, you can do things like real-time image recognition and content creation.\
In the next 40 minutes, we are going to tell you all about those experiences and how Apple is making it easy for you to integrate machine learning in your app.\

\f1 \cf5 \'c0\'fd\'c8\'e7
\f0 ,
\f1 \'c4\'e3\'bf\'c9\'d2\'d4\'d7\'f6\'d2\'bb\'d0\'a9\'ca\'c2\'b1\'c8\'c8\'e7\'ca\'b5\'ca\'b1\'cd\'bc\'c6\'ac\'ca\'b6\'b1\'f0\'ba\'cd\'c4\'da\'c8\'dd\'ca\'b6\'b1\'f0\'a1\'a3\'d4\'da\'cf\'c2\'c3\'e6\'b5\'c440\'b7\'d6\'d6\'d3\'c0\'ef\'a3\'ac\'ce\'d2\'bd\'ab\'d2\'aa\'b8\'e6\'cb\'df\'c4\'e3\'c8\'ab\'b2\'bf\'d5\'e2\'d0\'a9\'be\'ad\'d1\'e9\'ba\'cdapple\'b9\'ab\'cb\'be\'d4\'f5\'c3\'b4\'c8\'c3\'c4\'e3\'c7\'e1\'cb\'c9\'b5\'c4\'b0\'d1\'bb\'fa\'c6\'f7\'d1\'a7\'cf\'b0\'d5\'fb\'ba\'cf\'b5\'bd\'c4\'e3\'b5\'c4\'d3\'a6\'d3\'c3\'d6\'d0\'a1\'a3
\f0 \
\cf4 In particular, we will be focusing on Core ML, our machine learning framework.\
At Apple, we are using machine learning extensively. In our photos app, we use it for people recognition, scene recognition.\

\f1 \cf5 \'cc\'d8\'b1\'f0\'b5\'c4\'a3\'ac\'ce\'d2\'bd\'ab\'d2\'aa\'be\'db\'bd\'b9\'d4\'daCore ML \'a3\'ac\'bb\'fa\'c6\'f7\'d1\'a7\'cf\'b0\'bf\'f2\'bc\'dc\'c9\'cf\'a1\'a3\'d4\'daApple \'ce\'d2\'c3\'c7\'b4\'f3\'c1\'bf\'b5\'c4\'ca\'b9\'d3\'c3\'bb\'fa\'c6\'f7\'d1\'a7\'cf\'b0\'a1\'a3\'d4\'da\'ce\'d2\'c3\'c7\'cd\'bc\'c6\'acapp\'a3\'ac\'ce\'d2\'c3\'c7\'d3\'c3\'c0\'b4\'c8\'cb\'ca\'b6\'b1\'f0\'a3\'ac\'b3\'a1\'be\'b0\'ca\'b6\'b1\'f0\'a1\'a3
\f0 \
\cf4  In our keyboard app, we use it for the next word prediction, smart responses. We use it even in our watch to do smart responses and handwriting recognition. And I'm sure you guys also want to create similar experiences in your app. For example, some of you might like to do real-time image recognition.\

\f1 \cf5 \'d4\'da\'ce\'d2\'c3\'c7keyboard app \'ce\'d2\'c3\'c7\'d3\'c3\'cb\'fc\'cf\'c2\'b8\'f6\'b5\'a5\'b4\'ca\'b5\'c4\'d4\'a4\'ca\'e4\'c8\'eb\'a3\'ac\'b4\'cf\'c3\'f7\'b5\'c4\'b7\'b4\'d3\'a6\'a1\'a3\'ce\'d2\'c3\'c7\'d3\'c3\'cb\'fc\'d4\'da\'ce\'d2\'c3\'c7\'b5\'c4apple watch\'c9\'cf \'d7\'f6\'b4\'cf\'c3\'f7\'b5\'c4\'b7\'b4\'d3\'a6\'ba\'cd\'d0\'b4\'d7\'d6\'ca\'b6\'b1\'f0\'a1\'a3\'ce\'d2\'c8\'cf\'ce\'aa\'c4\'e3\'c3\'c7\'c4\'ea\'c7\'e1\'b5\'c4\'d0\'a1\'bb\'ef\'d7\'d3\'d2\'b2\'cf\'eb\'c8\'a5\'d4\'f6\'bc\'d3\'cd\'ac\'d1\'f9\'b5\'c4\'be\'ad\'d1\'e9\'d4\'da\'c4\'e3\'b5\'c4app\'c9\'cf\'a1\'a3\'c0\'fd\'c8\'e7\'a3\'ac\'c4\'e3\'c3\'c7\'c6\'e4\'d6\'d0\'b5\'c4\'d2\'bb\'b2\'bf\'b7\'d6\'cf\'eb\'d4\'f6\'bc\'d3\'ca\'b5\'be\'b0\'ca\'b6\'b1\'f0\'a1\'a3
\f0 \
\cf4  In this way, you can tell your users, provide them more contextual information about they are seeing, for example whether they are eating a hotdog or not. We want you to enable all of these great facility in your app.\

\f1 \cf5 \'d4\'da\'d5\'e2\'b7\'bd\'b7\'a8\'c9\'cf\'a3\'ac\'c4\'e3\'c4\'dc\'b8\'e6\'cb\'df\'c4\'e3app\'b5\'c4\'ca\'b9\'d3\'c3\'d5\'df\'a3\'ac\'cc\'e1\'b9\'a9\'b8\'f8\'cb\'fb\'c3\'c7\'b8\'fc\'b6\'e0\'b5\'c4\'bb\'b7\'be\'b3\'d0\'c5\'cf\'a2\'b9\'d8\'d3\'da\'cb\'fb\'c3\'c7\'bf\'b4\'b5\'bd\'b5\'c4\'a3\'ac\'c0\'fd\'c8\'e7\'cb\'fb\'c3\'c7\'ca\'c7\'b9\'bb\'d5\'fd\'d4\'da\'b3\'d4\'d2\'bb\'b8\'f6\'c8\'c8\'b9\'b7\'a1\'a3\'ce\'d2\'c3\'c7\'cf\'eb\'c4\'e3\'c3\'c7\'b5\'c4app\'b6\'bc\'d3\'d0\'d5\'e2\'d0\'a9\'b9\'a6\'c4\'dc\'a1\'a3
\f0 \
\cf4 And, hence, we are introducing machine learning frameworks just for you guys to enable all the awesome things. You can clap. But before we clap, we should understand why do we even need machine learning in the first place? And when do you need machine learning? So let's just say I'm a florist. And all I want to show is all the images of roses in user's photo library. This seems like a simple task, so I can do some programming.\

\f1 \cf5 \'ce\'d2\'c3\'c7\'d5\'fd\'d4\'da\'bd\'e9\'c9\'dc\'b5\'c4\'bb\'fa\'c6\'f7\'d1\'a7\'cf\'b0
\f0 frameworks
\f1 \'ce\'aa\'c1\'cb\'c4\'e3\'c3\'c7\'d0\'a1\'bb\'ef\'d7\'d3\'c4\'dc\'ca\'b9\'d3\'c3\'cb\'fc\'a1\'a3\'c4\'e3\'c3\'c7\'bf\'c9\'d2\'d4\'b9\'c4\'d5\'c6\'c1\'cb\'a1\'a3\'b5\'ab\'ca\'c7\'d4\'da\'b9\'c4\'d5\'c6\'d6\'ae\'c7\'b0\'ce\'d2\'c3\'c7\'d3\'a6\'b8\'c3\'d6\'aa\'b5\'c0\'ce\'d2\'c3\'c7\'ce\'aa\'ca\'b2\'c3\'b4\'d0\'e8\'d2\'aa\'bb\'fa\'c6\'f7\'d1\'a7\'cf\'b0\'a3\'ac\'ba\'ce\'ca\'b1\'d2\'aa\'bb\'fa\'c6\'f7\'d1\'a7\'cf\'b0\'a3\'bf\'bc\'d9\'c8\'e7\'ce\'d2\'ca\'c7\'b8\'f6\'bb\'a8\'c9\'cc\'a1\'a3\'ce\'d2\'cf\'eb\'d5\'b9\'ca\'be\'cb\'f9\'d3\'d0\'b5\'c4\'c3\'b5\'b9\'e5\'cd\'bc\'c6\'ac\'a3\'ac\'d4\'da\'d3\'c3\'bb\'a7\'cd\'bc\'c6\'ac\'bf\'e2\'c0\'ef\'a1\'a3\uc0\u160 \'d5\'e2\'ca\'c7\'b8\'f6\'ba\'dc\'bc\'f2\'b5\'a5\'b5\'c4\'b9\'a4\'d7\'f7\'a3\'ac\'b5\'ab\'ca\'c7\'d2\'aa\'d0\'b4\'ba\'dc\'b6\'e0\'b4\'fa\'c2\'eb\'a1\'a3
\f0 \
\cf4 Perhaps, I'll start with the color. I say if the dominant color in the picture is red maybe it's a rose. The problem is there are many rose that are white in nature, white in color, or yellow in color.\

\f1 \cf5 \'d2\'d4\'d1\'d5\'c9\'ab\'c8\'eb\'ca\'d6\'a1\'a3\'ba\'ec\'c9\'ab\'b5\'c4\'cd\'bc\'c6\'ac\'bf\'c9\'c4\'dc\'ca\'c7\'b8\'f6
\f2 \uc0\u55356 \u57145 
\f1 \'a1\'a3\'ce\'ca\'cc\'e2\'ca\'c7\'d3\'d0\'ba\'dc\'b6\'e0\'d1\'d5\'c9\'ab\'b2\'bb\'cd\'ac\'b5\'c4\'c3\'b5\'b9\'e5\'a3\'ac\'c0\'fd\'c8\'e7\'b0\'d7\'c9\'ab\'b5\'c4\'bb\'c6\'c9\'ab\'b5\'c4\'a1\'a3
\f0 \
\cf4 So I will actually go forward and start describing the shape. And soon I will realize that it's very difficult to write even such a simple program programmatically.\
Hence, [inaudible] to machine learning for our help. Rather than describing how a rose looks like programmatically, we will describe a rose empirically.\
We will learn that representation of rose empirically.\

\f1 \cf5 \'bf\'c9\'c4\'dc
\f0  
\f1 \'ce\'d2\'bd\'ab\'d2\'aa\'bb\'d8\'cd\'b7\'c3\'e8\'ca\'f6\'d0\'ce\'d7\'b4\'a1\'a3\'d0\'b4\'d5\'e2\'d1\'f9\'bc\'f2\'b5\'a5\'b5\'c4\'b3\'cc\'d0\'f2\'ca\'c7\'ba\'dc\'c0\'a7\'c4\'d1\'b5\'c4\'a1\'a3\'bb\'fa\'c6\'f7\'d1\'a7\'cf\'b0\'bf\'c9\'d2\'d4\'b0\'ef\'ce\'d2\'c3\'c7\'a1\'a3\'d5\'d2\'b3\'f6\'d3\'d0\'b4\'fa\'b1\'ed\'b5\'c4
\f2 \uc0\u55356 \u57145 
\f0 \
\cf4 Machine learning actually has two steps. One, training.\
So what you will do in this case, off-line you will collect images of roses, lilies, sunflowers and label them. You will run it past through a learning algorithm.\

\f1 \cf5 \'bb\'fa\'c6\'f7\'d1\'a7\'cf\'b0\'d3\'d0\'c1\'bd\'b2\'bd\'a1\'a3\'b5\'da\'d2\'bb\'a3\'ac\'be\'ad\'d1\'e9\'a1\'a3\'d2\'bb\'b4\'ce\'c4\'e3\'bf\'c9\'c4\'dc\'d5\'e2\'d1\'f9\'d7\'f6\'a3\'ac\'c4\'e3\'ca\'d5\'bc\'af
\f2 \uc0\u55356 \u57145 
\f1 \'a3\'ac\'b0\'d9\'ba\'cf
\f2 \uc0\u55356 \u57146 
\f1 \'a3\'ac
\f2 \uc0\u55356 \u57118 \u55356 \u57146 
\f1 \'a3\'ac\'b1\'ea\'bc\'c7\'cb\'fb\'c3\'c7\'a1\'a3\'cd\'a8\'b9\'fd\'d5\'e2 \'d7\'dc\'bd\'e1\'b3\'f6\'cb\'e3\'b7\'a8\'a1\'a3
\f0 \
\cf4 And you will get what we call as a model. This model is an empirical representation of how a rose look like. Almost all of this stuff happens off-line. And there is a big [inaudible] on the Internet around training.\

\f1 \cf5 \'c4\'e3\'bd\'ab\'d2\'aa\'d6\'aa\'b5\'c0\'ca\'b2\'c3\'b4\'bd\'d0\'d7\'f6Model\'a1\'a3Model\'bd\'a8\'c1\'a2\'d4\'da\'ca\'b2\'c3\'b4\'ca\'c7
\f2 \uc0\u55356 \u57145 
\f1 \'b5\'c4\'bb\'f9\'b4\'a1\'c9\'cf\'a3\'a8\'d2\'d4
\f2 \uc0\u55356 \u57145 
\f1 \'ce\'aa\'c0\'fd\'d7\'d3\'a3\'a9\'a1\'a3\'bc\'b8\'ba\'f5\'cb\'f9\'d3\'d0\'d5\'e2\'d0\'a9\'b6\'bc\'ca\'c7\'c0\'eb\'cf\'df\'b5\'c4\'a1\'a3\'d4\'da\'cd\'f8\'c9\'cf\'d3\'d0\'ba\'dc\'b6\'e0\'a1\'a3
\f0 \
\cf4 Training is a complex subject. Now once you have the model, you want to use this model.\

\f1 \cf5 \'be\'ad\'d1\'e9\'ca\'c7\'b8\'b4\'d4\'d3\'b5\'c4\'cf\'ee\'c4\'bf(\'bf\'bf\'be\'ad\'d1\'e9\'ca\'c7\'b8\'b4\'d4\'d3\'b5\'c4)\'a1\'a3\'d2\'bb\'b5\'a9\'d3\'d0
\f0 Model
\f1 \'a3\'ac\'c4\'e3\'be\'cd\'bb\'e1\'ca\'b9\'d3\'c3
\f0 Model
\f1 \'a1\'a3
\f0 \
\cf4 So what you will do, you will take a picture of a rose, embed this model in your app, you run it past through your model, and you will get the label and the confidence.\

\f1 \cf5 \'d2\'f2\'b4\'cb\'c4\'e3\'d2\'aa\'d7\'f6\'b5\'c4\'ca\'c7\'a3\'ac\'b0\'d1
\f2 \uc0\u55356 \u57145 
\f1 \'cd\'bc\'c6\'ac\'c7\'b6\'c8\'eb\'b5\'bd\'c4\'e3model\'c0\'ef\'a3\'ac\'c4\'e3\'bd\'ab\'d2\'aa\'b5\'c3\'b5\'bd\'b1\'ea\'c7\'a9\'ba\'cd\'d0\'c5\'d0\'c4\'a1\'a3
\f0 \
\cf4 This step is known as inference. Training is very complex, but inference is also getting very, very challenging nowadays. For example, if you want to describe a new, deep neural network programmatically in your code, you have to write thousands of lines of code just to describe the network. \

\f1 \cf5 \'d5\'e2\'b8\'f6\'b2\'bd\'d6\'e8\'ca\'c7\'cd\'c6\'b6\'cf\'a1\'a3\'be\'ad\'d1\'e9\'ca\'c7\'b8\'b4\'d4\'d3\'b5\'c4\'a1\'a3\'c0\'fd\'c8\'e7 \'a3\'ac\'c4\'e3\'cf\'eb\'c3\'e8\'ca\'f6\'d2\'bb\'b8\'f6\'d0\'c2\'b5\'c4 \'c9\'ee\'c8\'eb\'b5\'c4\'cd\'f8\'c2\'e7\'d4\'da\'c4\'e3\'b5\'c4\'b4\'fa\'c2\'eb\'c0\'ef\'a1\'a3\'c4\'e3\'b2\'bb\'b5\'c3\'b2\'bb\'d0\'b4\'c9\'cf\'c7\'a7\'d0\'d0\'b4\'fa\'c2\'eb\'a1\'a3
\f0 \
\cf4 It can be [inaudible] tedious and perhaps you can face your biggest challenge in proving the correctness of such a program. Once you make sure that the program is correct, you have to make sure that you're getting the best performance possible.\

\f1 \cf5 \'d5\'e2\'bf\'c9\'c4\'dc\'ca\'c7\'b5\'a5\'b5\'f7\'b7\'a6\'ce\'b6\'b5\'c4\'a3\'ac\'bf\'c9\'c4\'dc\'c4\'e3\'c4\'dc\'d6\'b8\'b3\'f6\'ba\'dc\'b4\'f3\'d5\'fd\'c8\'b7\'d0\'d4\'a1\'a3\'d2\'bb\'b5\'a9\'c4\'e3\'d6\'a4\'c3\'f7\'b4\'fa\'c2\'eb\'ca\'c7\'d5\'fd\'c8\'b7\'b5\'c4\'a3\'ac\'c4\'e3\'b1\'d8\'d0\'eb\'d6\'a4\'c3\'f7\'ca\'c7\'d7\'ee\'ba\'c3\'b5\'c4\'b7\'bd\'b7\'a8\'a1\'a3
\f0 \
\cf4 Finally, you also have to make sure that there is energy efficiency involved here.\
These tasks can be very, very challenging and can bog you down completely.\
At Apple, we are using on-device machine learning for several years now.\

\f1 \cf5 \'d7\'ee\'ba\'f3\'a3\'ac\'c4\'e3\'d2\'b2\'d2\'aa\'d6\'a4\'c3\'f7\'d5\'e2\'ca\'c7\'d3\'d0\'d0\'a7\'b5\'c4\'bd\'e2\'be\'f6\'c1\'cb\'b7\'bd\'b7\'a8\'a1\'a3\'d5\'e2\'b8\'f6\'b9\'a4\'d7\'f7\'ca\'c7\'b1\'e4\'bb\'af\'ce\'de\'b3\'a3\'b5\'c4\'a3\'ac\'bf\'c9\'c4\'dc\'ca\'b9\'c4\'e3\'cf\'dd\'c8\'eb\'c4\'e0\'cc\'b6\'a1\'a3\
\'d4\'daApple\'a3\'ac\'ce\'d2\'c3\'c7\'ca\'b9\'d3\'c3\'bb\'fa\'c6\'f7\'d1\'a7\'cf\'b0\'ba\'dc\'b6\'e0\'c4\'ea\'c1\'cb\'a1\'a3
\f0 \
\cf4 And we have solved these challenges. We have faced these challenges and solved them. And we really don't want you to solve them.\
We will solve them for you. We want you to focus only on the experience.\
We will give you the implementation, the best implementation possible.\
And, hence, we are introducing machine learning frameworks for you in which case we take care of all the challenges, and you take care of all the experience in your app.\

\f1 \cf5 \'ce\'d2\'c3\'c7\'bd\'e2\'be\'f6\'d5\'e2\'d0\'a9\'cc\'f4\'d5\'bd\'a1\'a3\'ce\'d2\'c3\'e6\'b6\'d4\'d5\'e2\'d0\'a9\'cc\'f4\'d5\'bd \'a1\'a2\'bd\'e2\'be\'f6\'c1\'cb\'cb\'fb\'c3\'c7\'a1\'a3\'ce\'d2\'c3\'c7\'c8\'b7\'ca\'b5\'b2\'bb\'cf\'eb\'bd\'e2\'be\'f6\'cb\'fb\'c3\'c7\'a1\'a3\'b5\'ab\'ca\'c7\'ce\'d2\'c3\'c7\'ce\'aa\'c4\'e3\'bd\'e2\'be\'f6\'c1\'cb\'cb\'fb\'c3\'c7\'a1\'a3\'ce\'d2\'cf\'eb\'c8\'c3\'c4\'e3\'be\'db\'bd\'b9\'d4\'da\'ce\'d2\'c3\'c7\'b5\'c4\'be\'ad\'d1\'e9\'c9\'cf\'a1\'a3\'ce\'d2\'c3\'c7\'b8\'f8\'c4\'e3\'ca\'b5\'cf\'d6\'d7\'ee\'ba\'c3\'b5\'c4\'ca\'b5\'cf\'d6\'a1\'a3\
\'d2\'bb\'b4\'ce\'ce\'d2\'c3\'c7\'bd\'e9\'c9\'dc\'bb\'fa\'c6\'f7\'d1\'a7\'cf\'b0\'bf\'f2\'bc\'dc\'a3\'ac\'ce\'d2\'c3\'c7\'bf\'bc\'c2\'c7\'b5\'bd\'cb\'f9\'d3\'d0\'b5\'c4\'b1\'e4\'bb\'af\'a3\'ac\'c4\'e3\'d6\'bb\'d2\'aa\'b9\'d8\'d7\'a2\'ce\'d2\'c3\'c7\'b5\'c4\'be\'ad\'d1\'e9\'be\'cd\'bf\'c9\'d2\'d4\'c1\'cb\'a3\'a8\'d4\'da\'c4\'e3\'b5\'c4app\'c0\'ef\'a3\'a9\'a1\'a3
\f0 \
By doing so, we are going to follow a layered approach. At the top is your app.\
We are going to introduce new domain specific framework, in particular, Vision.\
The Vision framework will actually allow you to do all the tasks related to computer vision. The best part about computer vision of Vision framework is that you don't have to be a configuration expert for using Vision framework.\
\
We are also enhancing our NLP APIs to include more languages and more functionality.\
We are introducing a brand-new framework called Core ML. This framework has an exhaustive support of machine learning algorithms, more deep learning as well as a standard.\
And finally, all of these frameworks are built on top of Accelerate and Metal Performance Shaders. To give you a sneak peak, we have Vision framework.\
Vision is our one-stop shop to do all things related to computer vision and images.\
You can use it to do things like object tracking or more modern deep learning-based face detection. There is a lot more to Vision framework.\
We are going to discuss Vision in detail tomorrow afternoon. NLP, this is our one-stop shop to do the text processing. You can use it to do things like language identification.\
And we are also releasing Named Entity Recognition APIs. These APIs can actually tell you in your text if it is a name of the location, people, and organization.\
We believe this will be very powerful for many app developers so please check this out tomorrow more in the morning session on NLP. Core ML, until now, we were discussing domain specific framework. Core ML is our machine learning framework and is domain agnostic. It supports multiple kind of inputs such as images, text, dictionaries, raw numbers. So you can do things like music tagging. There's another interesting part of our Core ML that it has the ability to deal with mixed input/output type. So you can take an image and you can get a text out. The best part about all these frameworks is that they can work together. So you take a text, you pass it through your NLP, you get the output, and you pass it through Core ML and do things like sentiment analysis.\
We are going to discuss it in detail in our in-depth Core ML session, how you do that exactly on Thursday. All of these frameworks are being powered by Accelerate and MPS. These are our engine. Now you can use Accelerate and MPS whenever you need some kind of math functionality. So it doesn't have to be necessarily related to machine learning. You can also use these Accelerate and MPS when you are doing custom ML models. So if you are using a machine learning model, you might like to use Accelerate and MPS. All these APIs run on user's device. And they're very, very highly performing.\
And we work very hard to make sure you get the best performance possible.\
Now because they learn on user's device, there are advantages. First, user privacy.\
Your users will be happy to know that you're not sending their personal messages, texts, and images to the server. Your users don't have to pay extra data cost just to receive these -- just to send this data to the server to get a prediction.\
You also don't have to actually give huge amount of money to server companies just to set up the servers and get a prediction. Our devices are very, very powerful. You can do a lot here. And finally, your app is always available. Let's just say your user goes to Yosemite in the wilderness where there is no network connectivity. They can still use your app.\
And this is very powerful. However, perhaps one of the best things you can do is real-time machine learning. Our devices are very powerful. They can run modern deep neural networks such as ResNet 15 [inaudible]. You can use our devices to do real-time image recognition. In these cases, you really don't have [inaudible] to actually get the application. So for any latency sensitive things, you might like to do real-time image recognition. So just to recap here, we are releasing a series of machine learning frameworks. If your app is a vision-based app, please use Vision framework. If your app is a text-based app, please use NLP. Now if you think that NLP and the Vision framework are not providing the APIs you need, go down on Core ML. Core ML provides exhaustive support of standard machine learning and deep learning algorithms.\
And let's just say you are [inaudible] your APIs machine learning algorithms then you should use Accelerate and MPS. We are going to discuss all these frameworks in detail in the next couple of days so you are [inaudible], but today let's just focus on Core ML.\
And to do that, I'll invite my friend and colleague, Michael. Thanks Gaurav.\
Hi everyone. I'm so excited to talk about Core ML and its role in helping you make a great app. We're going to start out with a high level overview of Core MLs main goals. We'll then talk a little bit about models and how they're represented. And then we'll walk you through the typical development process using Core ML. So the Core ML framework is available on macOS, iOS, watchOS, and tvOS. But Core ML is more than just a framework and a set of APIs.\
It's really a set of development tools all designed around making it as easy as possible to take a machine learned model and integrate it into your app. This will let you focus on the user experience you're trying to enable rather than the implementation details.\
Core ML is simple to use, will give you the performance you need while being compatible with a wide variety of machine learning tools out there. Its simplicity comes from having a Unified Inference API across all model types. Xcode integration will let you interact with machine learned models using the same software development practices you're all already experts in. It uses the inference engines Apple is already shipping to millions of customers in its apps and systems services now being made available to you via Core ML. And as mentioned, these are built on top of Metal and Accelerate to make the best use of hardware that your apps are being deployed on.\
Core ML is also designed to work in this rapidly evolving machine learning ecosystem.\
It defines a new public format for describing models as well as a set of tools that will allow you to convert the output of popular training libraries into this format.\
So that's Core ML in a nutshell. It's all about making it super easy to get a learned model integrated into your app. So let's talk a little bit more about these models.\
Since Core ML, a model is simply a function. Now the logic for this function happens to be learned from data but just like any other function, it takes in a set of inputs and produces a set of outputs. In this case, shown on the slide, we have a single input of an image and an output, perhaps telling you what type of flower is present in it. Now many of the use cases in which you may want to apply a machine learning model have some key function at its core. A common type of function is performing some sort of classification. It's taking a set of inputs and assigning some categorical label. Take, for example, sentiment analysis. Here, you may take in an English sentence and output whether the sentiment was positive or negative, here represented by an emoji.\
Now, in order to encode functions of this type, Core ML supports a wide variety of models. It has extensive support for neural networks both feedforward and recurrent neural networks with over 30 different layer types.\
It also supports tree ensembles, support vector machines, and generalized linear models.\
Now each of these model types are actually a large family of models.\
And we could spend the rest of this session and the rest of this conference just talking about any one of them, but don't let that intimidate you. You do not need to be a machine learning expert to make use of these models. You continue to focus on the use case you're trying to enable and let Core ML handle those low-level details.\
Core ML represents a model in a single document. That is, sharing a model is just like sharing a file. This document has the high level information you, as a developer, need to program against. That is the functional description, its inputs, types, and outputs as well as those details that Core ML needs to actually execute the function.\
For a neural network, this may be the structure of the neural network along with its trained parameter. We encourage you to come to our Thursday session to learn more about this format and the set of models it can encode. But maybe now in the back of your head you're starting to think well, where do I get these models? Where do models come from? Well, a great place to start is to visit our machine learning landing page on developer.apple.com. There you'll find a small collection of task specific, ready to use models already in the Core ML format.\
We'll be expanding the set overtime. And we encourage you to explore.\
Give it a try. This is a great way to get introduced to machine learning in general and Core ML and how it can be used in your app. But we may not have all the models you need. And for your application, you may need to make some customization to an existing model or make a whole new model from scratch.\
And for that, we encourage you and your colleagues to tap into the machine learning community.\
There is a thriving community out there. There are tons of libraries and models already existing for you to start playing with. In addition, there are wonderful online courses and new tutorials are popping up every week. You can do it.\
There's great resources to learn. And I'm confident that all of you can get started. It's a wonderful time. But you'll see that most of these libraries are focused around training. That is, it's a very important step but they'll spend a lot of time making sure that you can train a great model.\
What we want you to do is let Core ML take you that last mile from taking that machine learned model and actually deploying it in your app. So we're doing this by introducing the Core ML Tools Python package. This is a Python package that is centered completely around taking the output of these machine learning libraries and getting them into the Core ML format. We'll be expanding these tools over time, but they're also being made Open Source. So what this means, if you don't find the converter you need there, we're super confident you can already write your own. All of the primitives are there ready for you to use.\
Now I encourage you, again, to visit us on Thursday to learn more about this Python package and how you can easily convert models. OK. Now we have this model.\
Let's talk about how we use it in our apps. So you're going to start with the machine learned model in this Core ML format. You're going to simply add it to your Xcode project. And Xcode will automatically recognize this model as a machine learned model, and it will generate an interface for you.\
That will give you a programmatic interface to this model using data types and structures you're already familiar programming against. You'll program using this interface and compile it into your app. But in addition, the model itself will also get compiled and bundled into your app. That is, we'll take this format that's been optimized for openness and compatibility and turn it into one that is optimized for run time on the device. To show you this in action, I'm going to invite my friend and colleague, Lizi, to the stage. And I'm an engineer on the Core ML team. Today, let's take a look at how you can use Core ML to integrate machine learning into your applications.\
Now first some context. As much as I love machine learning, I also love to garden.\
And if you're anything like me, you may get really excited whenever you come across a new kind of flower and instantly want to identify it. So we sought out to build an app that would take images of different types of flowers and classify them by type.\
But first, in order to do that, we needed a model. So we went ahead and we collected many different images of different types of flowers, and we labeled each one.\
I then trained a neural network classifier using an Open Source machine learning tool and converted it into our Core ML format. So with this trained model and with this app shell of this flower classifier, let's take a look at how we can put the two together. So over in Xcode, you can see I'm currently running the flower classifier app and nearing the display on my device. And what I can do is I can go into the photos library and choose an image, but right now it doesn't currently predict anything for the output. It just displays this string. So if I move over to the ViewController, what we see is it has this caption method that currently just returns that blank string. It doesn't actually do anything. Over here, I have this flower classifier in the ML model format. And all I need to do is take it and drag it over into the project. And we can see, as soon as I add it, Xcode automatically recognizes this file format. And it populates the name of the model as well as what type it is underneath. We can see that the size is 41 megabytes and also other information like the author, license, or description associated with it. In the bottom, we can see the inputs and outputs that this model takes which, first is flower image, a type of image that's ordered red, green, blue, the following width and height. We can also see that it outputs a flower type as a string.\
So if give it an image of a rose, I would expect flower type to be rose.\
There's also a dictionary full of probabilities for different types of flowers.\
Now the first thing I want to do is I want to make sure that I add this to my app.\
And you'll see that afterwards this middle pane will show that the Swift generated source has arrived in the application. What that means is we can actually use this generated code to load the model and predict against it. To show you, let's go to the ViewController. The first thing I want to do is define this flower model.\
And to instantiate it, all I need to do is use the name of a model class itself.\
We'll see that it's highlighted because it exists in the project.\
Now next in the caption method, let's define a prediction. And we'll actually use the flower model and look inside. We'll see using auto complete that this prediction method is available that takes a CVPixelBuffer as input. We'll use that and pass the image directly to it. Now, instead of returning this preset string, we can use the prediction object and instead return the flower type. Now if I save, let's build and run the app. And what's happening while I do this is the model itself is actually getting compiled and bundled with the application. So if we go back to the device, if I go to my photos library, I can choose a rose on the second row.\
And we can see it actually is able to display rose. We give it another one, maybe the sunflower on the third. It's also able to get this one.\
Or even something a little bit more difficult like the passion flower on the bottom, it can still do. So to recap, we were just able to drag a trained ML model into Xcode and easily add it into our application with three lines of code.\
And now we have a full neural network classifier running on the device.\
But I have some other models that we might want to try so let's go through this again.\
You may have noticed there's also this FlowerSqueeze. And the first thing I'll do is try to drag it in again. And then I'll also add this one to the flower classifier, the hello flowers target so that it starts generating the Swift source in the background.\
And we'll see, again if we zoom in, that the name of this model is different.\
It's called FlowerSqueeze but in the bottom the inputs and outputs are exactly the same.\
What this means is that if I go back into the ViewController, instead of flower -- actually, let's delete flower classifier. We don't want that model anymore.\
And in the ViewController, instead of instantiating this one, we can use FlowerSqueeze.\
And the really neat thing about this model is its size. So if we go back, this one is only 5.4 megabytes, which is a huge difference. Back in the device, we can go to the photos library and choose another one like love in the mist and see that this app is also able to classify this as well. Try another passion flower or even a more difficult photo of a rose on the side and it's still able to predict correctly.\
So to recap, we just saw that we're able to run this neural network classifier on device using Core ML, all with only a couple lines of code. Now let's go back and recap what we just saw. We saw that in Xcode, as soon as you drag an ML model that's been trained into your application, you get this view that's populated that gives you information such as the name of the model, the type that it is underneath, and also other information like the size or any other information the author put in. You can also see in the bottom that you get information such as the input and output of the model which is very helpful if you're actually trying to use it. And once you add it to your app target, you get generated code that you can use to load and use the model to predict. We also saw in our application how simple it was to actually use it. Again, even though the model was a neural network classifier, all we needed to do to instantiate it was call the name of the file. This means that the model type was completely abstracted so whether it's a support vector machine, a linear model, or a neural network, you all load them the exact same way. We also noticed that the prediction method took a CVPixelBuffer. It was strongly typed so you know you'll be able to check input errors at compile time rather than at runtime. But now let's take a deeper look at the generated source that's being created by Xcode. Here, we see it defines three classes, first of which is the input that defines the flower image as a CVPixelBuffer.\
We then see the output with the same two types that were listed in the generated interface.\
And next, in the model class itself, we see the convenience initializer that we use to actually create the model and the predict method as well. But also inside this generated source, you have access to the underlying model. So for more advanced use cases, you can use it as well to programmatically interact with it.\
We take a look inside the MLModel class, we can see that there's a model description which gives you access to anything you saw in the metadata in Xcode.\
There is also an additional prediction method that takes protocol conforming input and returns protocol conforming output giving you more flexibility in how the input is provided. So we walked through the top half of this development flow and saw what happens when you drag a trained model into Xcode. It's able to generate Swift source that you can then use in your -- to use the model in your application.\
The model itself, as we saw, is also compiled and bundled in your app.\
To elaborate on this step a bit more, what we do, we first take the model from its JSON form, which is optimized for portability and ease of conversion, and compile it so that it loads quickly on your device when you initialize it. We also make sure that the model is matched to the underlying inference engines that are ultimately evaluating it on your device giving you optimized prediction when you need it. And the last thing we saw in the demo was we swapped out models. Mostly just to reduce the size but there are other reasons why you might want to play around with different ones. For example, accuracy or just to test out different types to see how they perform. In summary, today we saw an overview of some of the machine learning frameworks that we have available.\
We also introduced Core ML, a new framework for on-device inference.\
And also we showed you the development flow in action. For more information, make sure you check us out at developer.apple.com with our session number 703.\
And also, come visit some of the related sessions such as Vision and NLP and Core ML in depth on Thursday if you want to see some more use cases of how you can use Core ML or how to actually convert models into the Core ML format. Thank you and enjoy the rest of the conference.}